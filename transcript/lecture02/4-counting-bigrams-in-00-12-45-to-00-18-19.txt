Now it's actually going to be significantly more convenient for us to keep this
information in a two-dimensional array instead of a Python dictionary. So we're
going to store this information in a 2D array and the rows are going to be the
first character of the bigram and the columns are going to be the second
character and each entry in this two-dimensional array will tell us how often
that first character follows the second character in the dataset. So in
particular, the array representation that we're going to use or the library is
that of PyTorch. And PyTorch is a deep learning neural network framework, but
part of it is also this torch.tensor which allows us to create
multi-dimensional arrays and manipulate them very efficiently. So let's import
PyTorch, which you can do by import torch. And then we can create arrays. So
let's create an array of zeros and we give it a size of this array. Let's
create a 3x5 array as an example. And this is a 3x5 array of zeros. And by
default, you'll notice a.dtype, which is short for data type, is float32. So
these are single precision floating point numbers. Because we are going to
represent counts, let's actually use dtype as torch.in32. So these are 32-bit
integers. So now you see that we have integer data inside this tensor. Now,
tensors allow us to really manipulate all the individual entries and do it very
efficiently. So, for example, if we want to change this bit, we have to index
into the tensor. And in particular, here, this is the first row because it's
zero-indexed. So this is row index 1 and column index 0, 1, 2, 3. So a at 1, 3,
we can set that to 1. And then a will have a 1 over there. We can of course
also do things like this. So now a will be 2 over there or 3. And also we can
for example say a 0, 0 is 5 and then a will have a 5 over here. so that's how
we can index into the arrays now of course the array that we are interested in
is much much bigger so for our purposes we have 26 letters of the alphabet and
then we have two special characters s and e so we want 26 plus 2 or 28 by 28
array and let's call it the capital N because it's going to represent sort of
the counts let me erase this stuff so that's the array that starts at zeros 28
by 28, and now let's copy paste this here, but instead of having a dictionary
B, which we're going to erase, we now have an N. Now the problem here is that
we have these characters which are strings, but we have to now basically index
into an array, and we have to index using integers. So we need some kind of a
lookup table from characters to integers. So let's construct such a character
array and the way we're going to do this is we're going to take all the words
which is a list of strings we're going to concatenate all of it into a massive
string so this is just simply the entire data set as a single string we're
going to pass this to the set constructor which takes this massive string and
throws out duplicates because sets do not allow duplicates so set of this will
just be the set of all the lowercase characters and there should be a total of
26 of them. And now we actually don't want a set, we want a list. But we don't
want a list sorted in some weird arbitrary way, we want it to be sorted from A
to Z. So sorted list. So those are our characters. Now what we want is this
lookup table as I mentioned. So let's create a special s to i, I will call it.
s is string or character and this will be an s to i mapping for is in enumerate
of these characters so enumerate basically gives us this iterator over the
integer index and the actual element of the list and then we are mapping the
character to the integer so s to i is a mapping from a to 0 b to 1 etc all the
from Z to 25 and that's going to be useful here but we actually also have to
specifically set that S will be 26 and S2i at E will be 27 right because Z was
25 so those are the lookups and now we can come here and we can map both
character 1 and character 2 to their integers so this will be S2i at character
and ix2 will be s2i of character 2. And now we should be able to do this line
but using our array. So n at ix1, ix2. This is the two-dimensional array
indexing I've shown you before and honestly just plus equals 1 because
everything starts at 0. So this should work and give us a large 28 by 28 array
of all these counts. So if we print n, this is the array, but of course it